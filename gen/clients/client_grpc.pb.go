// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/clients/client.proto

package clients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientsApiClient is the client API for ClientsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsApiClient interface {
	ListClient(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*GetClientResponse, error)
	GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error)
	GetClientsByTYPE(ctx context.Context, in *GetClientsByTYPERequest, opts ...grpc.CallOption) (*GetClientsByTYPEResponse, error)
	GetClientsByMAKE(ctx context.Context, in *GetClientsByMAKERequest, opts ...grpc.CallOption) (*GetClientsByMAKEResponse, error)
	AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*AddClientResponse, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error)
}

type clientsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsApiClient(cc grpc.ClientConnInterface) ClientsApiClient {
	return &clientsApiClient{cc}
}

func (c *clientsApiClient) ListClient(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error) {
	out := new(ListClientResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/ListClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*GetClientResponse, error) {
	out := new(GetClientResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error) {
	out := new(GetClientsResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) GetClientsByTYPE(ctx context.Context, in *GetClientsByTYPERequest, opts ...grpc.CallOption) (*GetClientsByTYPEResponse, error) {
	out := new(GetClientsByTYPEResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/GetClientsByTYPE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) GetClientsByMAKE(ctx context.Context, in *GetClientsByMAKERequest, opts ...grpc.CallOption) (*GetClientsByMAKEResponse, error) {
	out := new(GetClientsByMAKEResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/GetClientsByMAKE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*AddClientResponse, error) {
	out := new(AddClientResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsApiClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error) {
	out := new(DeleteClientResponse)
	err := c.cc.Invoke(ctx, "/grpccrm.grpc.client.v1.ClientsApi/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsApiServer is the server API for ClientsApi service.
// All implementations must embed UnimplementedClientsApiServer
// for forward compatibility
type ClientsApiServer interface {
	ListClient(context.Context, *ListClientRequest) (*ListClientResponse, error)
	GetClient(context.Context, *GetClientRequest) (*GetClientResponse, error)
	GetClients(context.Context, *GetClientsRequest) (*GetClientsResponse, error)
	GetClientsByTYPE(context.Context, *GetClientsByTYPERequest) (*GetClientsByTYPEResponse, error)
	GetClientsByMAKE(context.Context, *GetClientsByMAKERequest) (*GetClientsByMAKEResponse, error)
	AddClient(context.Context, *AddClientRequest) (*AddClientResponse, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*DeleteClientResponse, error)
	mustEmbedUnimplementedClientsApiServer()
}

// UnimplementedClientsApiServer must be embedded to have forward compatible implementations.
type UnimplementedClientsApiServer struct {
}

func (UnimplementedClientsApiServer) ListClient(context.Context, *ListClientRequest) (*ListClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClient not implemented")
}
func (UnimplementedClientsApiServer) GetClient(context.Context, *GetClientRequest) (*GetClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedClientsApiServer) GetClients(context.Context, *GetClientsRequest) (*GetClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedClientsApiServer) GetClientsByTYPE(context.Context, *GetClientsByTYPERequest) (*GetClientsByTYPEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsByTYPE not implemented")
}
func (UnimplementedClientsApiServer) GetClientsByMAKE(context.Context, *GetClientsByMAKERequest) (*GetClientsByMAKEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsByMAKE not implemented")
}
func (UnimplementedClientsApiServer) AddClient(context.Context, *AddClientRequest) (*AddClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedClientsApiServer) DeleteClient(context.Context, *DeleteClientRequest) (*DeleteClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedClientsApiServer) mustEmbedUnimplementedClientsApiServer() {}

// UnsafeClientsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsApiServer will
// result in compilation errors.
type UnsafeClientsApiServer interface {
	mustEmbedUnimplementedClientsApiServer()
}

func RegisterClientsApiServer(s grpc.ServiceRegistrar, srv ClientsApiServer) {
	s.RegisterService(&ClientsApi_ServiceDesc, srv)
}

func _ClientsApi_ListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).ListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/ListClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).ListClient(ctx, req.(*ListClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).GetClients(ctx, req.(*GetClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_GetClientsByTYPE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsByTYPERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).GetClientsByTYPE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/GetClientsByTYPE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).GetClientsByTYPE(ctx, req.(*GetClientsByTYPERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_GetClientsByMAKE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsByMAKERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).GetClientsByMAKE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/GetClientsByMAKE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).GetClientsByMAKE(ctx, req.(*GetClientsByMAKERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).AddClient(ctx, req.(*AddClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsApi_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsApiServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpccrm.grpc.client.v1.ClientsApi/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsApiServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientsApi_ServiceDesc is the grpc.ServiceDesc for ClientsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpccrm.grpc.client.v1.ClientsApi",
	HandlerType: (*ClientsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClient",
			Handler:    _ClientsApi_ListClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientsApi_GetClient_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _ClientsApi_GetClients_Handler,
		},
		{
			MethodName: "GetClientsByTYPE",
			Handler:    _ClientsApi_GetClientsByTYPE_Handler,
		},
		{
			MethodName: "GetClientsByMAKE",
			Handler:    _ClientsApi_GetClientsByMAKE_Handler,
		},
		{
			MethodName: "AddClient",
			Handler:    _ClientsApi_AddClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientsApi_DeleteClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clients/client.proto",
}
